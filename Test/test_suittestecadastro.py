# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestSuittestecadastro():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}

  def teardown_method(self, method):
    self.driver.quit()

  def test_00Testecadastrarlivrotitulovazio(self):
    self.driver.get("http://127.0.0.1:5000/")
    self.driver.set_window_size(1280, 680)
    self.driver.find_element(By.LINK_TEXT, "Adicionar Livro").click()
    self.driver.find_element(By.ID, "autor").click()
    self.driver.find_element(By.ID, "autor").send_keys("Desconhecido")
    self.driver.find_element(By.ID, "ano_publicacao").click()
    self.driver.find_element(By.ID, "ano_publicacao").send_keys("1989")
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
    self.driver.find_element(By.CSS_SELECTOR, ".flash").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".flash").text == "Erro: O campo título não pode ser vazio."

  def test_02Testecadastrarnovolivro(self):
    self.driver.get("http://127.0.0.1:5000/")
    self.driver.set_window_size(1280, 680)
    self.driver.find_element(By.LINK_TEXT, "Adicionar Livro").click()
    self.driver.find_element(By.ID, "titulo").click()
    self.driver.find_element(By.ID, "titulo").send_keys("Livro novo")
    self.driver.find_element(By.ID, "autor").click()
    self.driver.find_element(By.ID, "autor").send_keys("Desconhecido")
    self.driver.find_element(By.ID, "ano_publicacao").click()
    self.driver.find_element(By.ID, "ano_publicacao").send_keys("1989")
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
    self.driver.find_element(By.CSS_SELECTOR, "main").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".flash").text == "Livro cadastrado com sucesso!"

  def test_03Testecadastrarlivroexistente(self):
    self.driver.get("http://127.0.0.1:5000/")
    self.driver.set_window_size(1280, 680)
    self.driver.find_element(By.LINK_TEXT, "Adicionar Livro").click()
    self.driver.find_element(By.ID, "titulo").click()
    self.driver.find_element(By.ID, "titulo").send_keys("Livro novo")
    self.driver.find_element(By.ID, "autor").click()
    self.driver.find_element(By.ID, "autor").send_keys("Desconhecido")
    self.driver.find_element(By.ID, "ano_publicacao").click()
    self.driver.find_element(By.ID, "ano_publicacao").send_keys("1989")
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
    self.driver.find_element(By.CSS_SELECTOR, "main").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".flash").text == "Erro: Livro já cadastrado."

  def test_04Testeeditarlivronovo(self):
    self.driver.get("http://127.0.0.1:5000/")
    self.driver.set_window_size(1280, 680)
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").text == "Livro novo"
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) a").click()
    self.driver.find_element(By.ID, "titulo").click()
    self.driver.find_element(By.ID, "titulo").send_keys(" editado")
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
    self.driver.find_element(By.CSS_SELECTOR, ".flash").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".flash").text == "Livro atualizado com sucesso!"

  def test_05Testeexcluirlivronovoeditado(self):
    self.driver.get("http://127.0.0.1:5000/")
    self.driver.set_window_size(1280, 680)
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").text == "Livro novo editado"
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) button").click()
    self.driver.find_element(By.CSS_SELECTOR, ".flash").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".flash").text == "Livro excluído com sucesso!"

